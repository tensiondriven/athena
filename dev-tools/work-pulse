#!/bin/bash

# Work Pulse - Visual indicator of recent development activity  
# Shows files changed in last hour with visual indicators
# Replaces activity-status with better formatting and features

set -e

PROJECT_ROOT="/Users/j/Code/athena"
REFRESH_RATE=1
MAX_FILES=12

# Colors and indicators
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Visual indicators
FIRE="üî•"
ROCKET="üöÄ"
GEAR="‚öôÔ∏è"
DOCS="üìù"
TEST="üß™"
DATA="üíæ"
COMMIT="‚úÖ"

format_time_ago() {
    local seconds=$1
    if [ $seconds -lt 60 ]; then
        echo "${seconds}s"
    elif [ $seconds -lt 3600 ]; then
        echo "$((seconds/60))m"
    else
        echo "$((seconds/3600))h"
    fi
}

get_file_activity() {
    # Much faster: only check files modified in last 10 minutes 
    local cutoff=$(($(date +%s) - 600))
    local now=$(date +%s)
    
    # Use find with -newer for speed, limit to key directories
    find "$PROJECT_ROOT"/{docs,system,dev-tools} -type f \
        -newermt "@$cutoff" \
        ! -path "*/.*" \
        ! -path "*/__pycache__/*" \
        ! -path "*/node_modules/*" \
        ! -path "*/venv/*" \
        ! -path "*/.git/*" \
        ! -path "*/data/*" \
        ! -name "*.pyc" \
        ! -name "*.log" \
        ! -name "*.sqlite" \
        2>/dev/null | \
    head -$MAX_FILES | \
    while read filepath; do
        local timestamp=$(stat -f '%m' "$filepath" 2>/dev/null || echo 0)
        local ago=$((now - timestamp))
        local basename=$(basename "$filepath")
        local relpath=$(echo "$filepath" | sed "s|$PROJECT_ROOT/||")
        local time_str=$(format_time_ago $ago)
        
        # Truncate long paths - show end if over 40 chars
        local display_path="$relpath" 
        if [ ${#relpath} -gt 40 ]; then
            display_path="...${relpath: -37}"
        fi
        
        # Simple read/write based on recency
        local indicator=""
        local color=""
        
        if [ $ago -lt 30 ]; then
            # Recent = write operation
            indicator="üìù" color="$GREEN"
        else
            # Older = likely read operation
            indicator="üëÅÔ∏è" color="$RED"
        fi
        
        echo "$timestamp ${time_str} ${color}${indicator}${NC} $display_path"
    done | sort -nr | head -$MAX_FILES | cut -d' ' -f2-
}

show_recent_activity() {
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ WORK PULSE ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}Recent activity in athena/${NC}"
    echo ""
    printf "%-8s %-3s %s\n" "AGO" "OP" "FILE"
    echo "----------------------------------------"
    get_file_activity
    echo ""
}

show_git_activity() {
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ RECENT COMMITS ‚îÅ‚îÅ‚îÅ${NC}"
    
    # Show recent commits with nice formatting
    cd /Users/j/Code/athena
    git log --oneline --since="2 hours ago" --color=always | head -5 | \
    while read -r line; do
        echo -e "${COMMIT} ${GREEN}$line${NC}"
    done
    
    echo ""
}

get_git_status() {
    cd "$PROJECT_ROOT" 2>/dev/null || return
    local status_output=$(git status --porcelain 2>/dev/null)
    local branch=$(git branch --show-current 2>/dev/null || echo "unknown")
    
    if [ -z "$status_output" ]; then
        printf "üåø %s (clean)" "$branch"
    else
        local modified=$(echo "$status_output" | grep "^ M" | wc -l | tr -d ' ' || echo 0)
        local added=$(echo "$status_output" | grep "^A" | wc -l | tr -d ' ' || echo 0)
        local untracked=$(echo "$status_output" | grep "^??" | wc -l | tr -d ' ' || echo 0)
        printf "üî• %s (M:%d A:%d ?:%d)" "$branch" "$modified" "$added" "$untracked"
    fi
}

show_system_pulse() {
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ SYSTEM PULSE ‚îÅ‚îÅ‚îÅ${NC}"
    
    # Quick system indicators
    collector_status="‚ùå"
    if pgrep -f "athena-collector" > /dev/null 2>&1; then
        collector_status="‚úÖ"
    fi
    
    printf "Collector: %s  Git: %s  Time: %s\n" \
        "$collector_status" \
        "$(get_git_status)" \
        "$(date '+%H:%M')"
    
    echo ""
}

show_header() {
    echo "üîÑ Athena Work Pulse Monitor"
    echo "üìÅ Project: $PROJECT_ROOT"
    echo "üìÇ Git: $(get_git_status)"
    echo "----------------------------------------"
    printf "%-8s %-3s %s\n" "AGO" "OP" "FILE"
    echo "----------------------------------------"
}

check_self_update() {
    local script_path="$0"
    local last_modified=$(stat -f '%m' "$script_path" 2>/dev/null || echo 0)
    
    if [ -z "$SCRIPT_LAST_MODIFIED" ]; then
        export SCRIPT_LAST_MODIFIED=$last_modified
    elif [ "$last_modified" -gt "$SCRIPT_LAST_MODIFIED" ]; then
        echo "üîÑ Script updated, restarting..."
        sleep 1  # Brief pause to avoid restart loops
        export SCRIPT_LAST_MODIFIED=$last_modified
        exec "$script_path" "$@"
    fi
}

main() {
    # Force watch mode if requested
    if [ "$1" = "--watch" ]; then
        run_interactive
        exit 0
    fi
    
    # Default to interactive mode for terminals (unless --once specified)
    if [ -t 1 ] && [ "$1" != "--once" ] && [ "$1" != "--help" ] && [ "$1" != "-h" ]; then
        # Interactive mode (continuous monitoring)
        run_interactive
        exit 0
    fi
    
    if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
        echo "Usage: $0 [--once] [--watch]"
        echo ""
        echo "Options:"
        echo "  --once    Show activity once and exit (default for pipes/scripts)"
        echo "  --watch   Continuous monitoring (default for interactive terminals)"
        echo "  --help    Show this help"
        echo ""
        echo "Icons:"
        echo "  üìù Write operation (recent <30s)"
        echo "  üëÅÔ∏è  Read operation (older files)"
        echo ""
        echo "Features:"
        echo "  üîÑ Auto-restarts when script is modified (watch mode)"
        echo "  üìÇ Shows git status (M:modified A:added ?:untracked)"
        echo "  ‚å®Ô∏è  Press any key to quit (watch mode)"
        echo "  üì§ Pipe-friendly output when used in scripts"
        exit 0
    fi
    
    # One-shot mode (default when piped or --once specified)
    show_system_pulse
    show_recent_activity
    show_git_activity
    echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    exit 0
}

run_interactive() {
    # Continuous monitoring with self-update detection
    while true; do
        check_self_update "$@"
        clear
        echo "üîÑ Athena Work Pulse Monitor"
        echo "üìÅ Project: $PROJECT_ROOT"
        echo "üìÇ Git: $(get_git_status)"
        echo "----------------------------------------"
        printf "%-8s %-3s %s\n" "AGO" "OP" "FILE"
        echo "----------------------------------------"
        get_file_activity
        echo ""
        show_git_activity
        echo -e "${CYAN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
        echo "‚å®Ô∏è  Press any key to quit..."
        # Quit on any keypress
        if read -t $REFRESH_RATE -n 1 key 2>/dev/null; then
            echo "üëã Goodbye!"
            exit 0
        fi
    done
}

main "$@"