#!/bin/bash

# Work Pulse - Visual indicator of recent development activity
# Shows files changed in last hour with visual indicators

set -e

# Colors and indicators
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Visual indicators
FIRE="🔥"
ROCKET="🚀"
GEAR="⚙️"
DOCS="📝"
TEST="🧪"
DATA="💾"
COMMIT="✅"

show_recent_activity() {
    echo -e "${CYAN}━━━ WORK PULSE ━━━${NC}"
    echo -e "${BLUE}Last hour activity in athena/${NC}"
    echo ""
    
    # Find files modified in last hour, exclude common noise and data directories
    find /Users/j/Code/athena -type f \
        -newermt "1 hour ago" \
        ! -path "*/.*" \
        ! -path "*/__pycache__/*" \
        ! -path "*/node_modules/*" \
        ! -path "*/venv/*" \
        ! -path "*/.git/*" \
        ! -path "*/data/*" \
        ! -name "*.pyc" \
        ! -name "*.log" \
        ! -name "*.sqlite" \
        -exec ls -la {} + 2>/dev/null | \
    while read -r line; do
        # Parse file info
        if [[ $line =~ ^total ]]; then continue; fi
        
        file_path=$(echo "$line" | awk '{print $NF}')
        file_time=$(echo "$line" | awk '{print $(NF-2), $(NF-1)}')
        file_size=$(echo "$line" | awk '{print $5}')
        
        # Get relative path from athena root
        rel_path=${file_path#/Users/j/Code/athena/}
        
        # Truncate long paths - show end if over 40 chars
        display_path="$rel_path"
        if [ ${#rel_path} -gt 40 ]; then
            display_path="...${rel_path: -37}"
        fi
        
        # Choose indicator based on file type/location
        indicator=""
        color=""
        
        case "$rel_path" in
            *.py) indicator="$ROCKET" color="$GREEN" ;;
            *.md) indicator="$DOCS" color="$BLUE" ;;
            *test*|*spec*) indicator="$TEST" color="$PURPLE" ;;
            *.sql*|*data*) indicator="$DATA" color="$YELLOW" ;;
            *docker*|*compose*) indicator="$GEAR" color="$CYAN" ;;
            *) indicator="$FIRE" color="$RED" ;;
        esac
        
        # Show with nice formatting - timestamp first, aligned
        printf "${YELLOW}%8s${NC} ${color}%s${NC} %s\n" \
            "$file_time" \
            "$indicator" \
            "$display_path"
    done | sort -k1 | tail -10
    
    echo ""
}

show_git_activity() {
    echo -e "${CYAN}━━━ RECENT COMMITS ━━━${NC}"
    
    # Show recent commits with nice formatting
    cd /Users/j/Code/athena
    git log --oneline --since="2 hours ago" --color=always | head -5 | \
    while read -r line; do
        echo -e "${COMMIT} ${GREEN}$line${NC}"
    done
    
    echo ""
}

show_system_pulse() {
    echo -e "${CYAN}━━━ SYSTEM PULSE ━━━${NC}"
    
    # Quick system indicators
    collector_status="❌"
    if pgrep -f "athena-collector" > /dev/null 2>&1; then
        collector_status="✅"
    fi
    
    git_status=$(cd /Users/j/Code/athena && git status --porcelain | wc -l | tr -d ' ')
    git_indicator="✅"
    if [ "$git_status" -gt 0 ]; then
        git_indicator="⚠️"
    fi
    
    printf "Collector: %s  Git: %s (%s changes)  Time: %s\n" \
        "$collector_status" \
        "$git_indicator" \
        "$git_status" \
        "$(date '+%H:%M')"
    
    echo ""
}

# Main execution
clear
show_system_pulse
show_recent_activity
show_git_activity

echo -e "${CYAN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"